#!/usr/bin/env ruby
# defocus

# 20250925
# 0.1.0

require 'MacOS/HardwarePort'
require 'MacOS/IfConfig'

class Defocus
  RESOLVERS = [
    {
      name: 'AdGuard',
      servers: ['94.140.14.14', '94.140.15.15'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'CleanBrowsing',
      servers: ['185.228.168.9', '185.228.169.9'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Cloudflare',
      servers: ['1.1.1.1', '1.0.0.1'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Control D',
      servers: ['76.76.2.0', '76.76.10.0'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Google',
      servers: ['8.8.8.8', '8.8.4.4'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Mullvad',
      servers: ['194.242.2.2', '194.242.2.3'],
      source: 'https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md'
    },
    {
      name: 'NextDNS',
      servers: ['45.90.28.0', '45.90.30.0'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'OpenDNS',
      servers: ['208.67.222.222', '208.67.220.220'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'OpenNIC',
      servers: ['134.195.4.2', '144.24.127.228'],
      source: 'https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md'
    },
    {
      name: 'Quad9',
      servers: ['9.9.9.9', '149.112.112.112'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    }
  ]

  class << self
    def current_dns(hardware_port = primary_hardware_port)
      output = `networksetup -getdnsservers "#{hardware_port}"`.strip
      return [] if output.include?("There aren't any DNS Servers set")
      output.split("\n")
    end

    def primary_hardware_port
      active_interface = MacOS::IfConfig.active_interfaces.first
      raise "No active network interfaces found" unless active_interface

      hardware_port = MacOS::HardwarePort.find_by_interface(active_interface.interface)
      raise("Hardware port not found for #{active_interface.interface}") unless hardware_port

      hardware_port.name
    end

    def set_dns(servers, hardware_port = primary_hardware_port)
      system("sudo networksetup -setdnsservers #{hardware_port} #{servers.join(' ')}")
      $?.success?
    end

    def random_resolver
      current_resolver = RESOLVERS.find{|r| r[:servers] == current_dns}
      non_current_resolvers = current_resolver ? (RESOLVERS - [current_resolver]) : RESOLVERS
      non_current_resolvers.sample
    end

    def switch
      old_dns = current_dns
      new_resolver = random_resolver
      success = set_dns(new_resolver[:servers])
      raise "networksetup command failed" unless success

      sleep(1)
      new_dns = current_dns

      unless new_dns == new_resolver[:servers]
        raise "DNS switch verification failed. Expected #{resolver[:servers]}, got #{new_dns}"
      end
      new_resolver
    end

    def status
      current_servers = current_dns
      current_resolver = RESOLVERS.find{|r| r[:servers] == current_servers}

      puts "Interface: #{primary_hardware_port}"
      puts "Current DNS: #{current_servers.join(', ')}"
      puts "Resolver: #{current_resolver ? current_resolver[:name] : 'Unknown/Custom'}"
    end
  end
end

def main
  case ARGV[0]
  when 'switch'
    Defocus.switch
  when 'status'
    Defocus.status
  else
    puts "Usage: defocus [switch|status]"
  end
end

main
