#!/usr/bin/env ruby
# revolver

# 20250929
# 0.7.0

# Description: Switch DNS resolvers at random.

# Changes since 0.6:
# -/0: Be able to load resolvers from a file.
# 1. ~ Revolver: class methods --> instance methods
# 2. + Revolver#initialize: Pass in resolvers dependency.
# 3. ~ list(): /RESOLVERS/@resolvers/
# 4. ~ status(): /RESOLVERS/@resolvers/
# 5. ~ find_resolver(): /RESOLVERS/@resolvers/
# 6. ~ random_resolver(): /RESOLVERS/@resolvers/
# 7. ~ switches(): + -d, --data, --data_file, --data_filepath, --resolvers_data_filepath
# 8. + supplied_resolvers_data_filepath(): User-supplied data filepath via switches.
# 9. + default_resolvers_data_filepath(): Return the default resolvers data filepath (~/.config/revolver/resolvers.json).
# 10. + resolvers_data_filepath(): Choose either the supplied or the default filepath and expand it.
# 11. + resolvers(): Load resolvers from a file if exists, else fallback to Revolver::RESOLVERS.
# 12. ~ main(): Instantiate Revolver with resolvers for each sub-command invocation.

require 'json'
require 'switches.rb'

require 'FileUtils/which'
require 'MacOS/HardwarePort'
require 'MacOS/IfConfig'
require 'MacOS/VPN'

class Revolver
  RESOLVERS = [
    {
      name: 'AdGuard',
      servers: ['94.140.14.14', '94.140.15.15'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'CleanBrowsing',
      servers: ['185.228.168.9', '185.228.169.9'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Cloudflare',
      servers: ['1.1.1.1', '1.0.0.1'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Control D',
      servers: ['76.76.2.0', '76.76.10.0'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Google',
      servers: ['8.8.8.8', '8.8.4.4'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'Mullvad',
      servers: ['194.242.2.2', '194.242.2.3'],
      source: 'https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md'
    },
    {
      name: 'NextDNS',
      servers: ['45.90.28.0', '45.90.30.0'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'OpenDNS',
      servers: ['208.67.222.222', '208.67.220.220'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    },
    {
      name: 'OpenNIC',
      servers: ['134.195.4.2', '144.24.127.228'],
      source: 'https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md'
    },
    {
      name: 'Quad9',
      servers: ['9.9.9.9', '149.112.112.112'],
      source: 'https://github.com/curl/curl/wiki/DNS-over-HTTPS'
    }
  ]

  def list(resolver_name = nil, format: nil)
    format ||= 'console'
    if resolver_name
      resolver = find_resolver(resolver_name)
      display_resolver(resolver, format: format)
    else
      @resolvers.each do |resolver|
        display_resolver(resolver, format: format)
      end
    end
  end

  def spin(format: nil)
    format ||= 'console'
    display_resolver(random_resolver, format: format)
  end

  def status(format: nil)
    format ||= 'console'
    current_servers = current_dns
    current_resolver = @resolvers.find{|r| r[:servers] == current_servers}
    display_status(current_resolver, format: format)
  end

  def switch(resolver_name = nil)
    old_dns = current_dns
    candidate_resolver = resolver_name ? find_resolver(resolver_name) : random_resolver
    verify_proposed_change(candidate_resolver)
    candidate_dns = candidate_resolver[:servers]
    if vpn_up?
      switch_with_vpn(candidate_dns)
    else
      switch_without_vpn(candidate_dns)
    end
    verify_dns_change(old_dns, candidate_dns)
    candidate_resolver
  end

  private

  def initialize(resolvers = nil)
    @resolvers = resolvers
  end

  def find_resolver(name)
    resolver = @resolvers.find{|r| r[:name].downcase == name.downcase}
    raise "Unknown resolver: #{name}" unless resolver
    resolver
  end

  def display_resolver(resolver, format: 'console')
    case format
    when 'console'
      puts "Name: #{resolver[:name]}"
      puts "DNS Servers: #{resolver[:servers].join(', ')}"
      puts "Source: #{resolver[:source]}"
    when 'json'
      puts resolver.to_json
    end
  end

  def display_status(resolver, format: 'console')
    name = resolver ? resolver[:name] : 'Unknown/Custom'
    dns_servers = (resolver ? resolver[:servers] : current_dns).join(', ')
    case format
    when 'console'
      puts "Interface: #{primary_hardware_port}"
      puts "Name: #{name}"
      puts "DNS Servers: #{dns_servers}"
    when 'json'
      puts({
        interface: primary_hardware_port,
        name: name,
        dns_servers: dns_servers,
      }.to_json)
    end
  end

  def switch_with_vpn(candidate_dns)
    unless mercurial_available?
      raise "VPN detected but mercurial not found in PATH."
    end
    system("mercurial switch --dns_servers #{candidate_dns.join(',')} --retain_endpoint")
    unless $?.success?
      raise "Failed to restart VPN with new DNS servers."
    end
  end

  def switch_without_vpn(candidate_dns)
    set_dns(candidate_dns)
  end

  def random_resolver
    current_resolver = @resolvers.find{|r| r[:servers] == current_dns}
    non_current_resolvers = current_resolver ? (@resolvers - [current_resolver]) : @resolvers
    non_current_resolvers.sample
  end

  def primary_hardware_port
    active_interface = MacOS::IfConfig.active_interfaces.first
    raise "No active network interfaces found" unless active_interface

    hardware_port = MacOS::HardwarePort.find_by_interface(active_interface.interface)
    raise("Hardware port not found for #{active_interface.interface}") unless hardware_port

    hardware_port.name
  end

  def current_dns(hardware_port = primary_hardware_port)
    output = `networksetup -getdnsservers "#{hardware_port}"`.strip
    return [] if output.include?("There aren't any DNS Servers set")
    output.split("\n")
  end

  def set_dns(dns_servers, hardware_port = primary_hardware_port)
    system("sudo networksetup -setdnsservers #{hardware_port} #{dns_servers.join(' ')}")
    raise "networksetup command failed" unless $?.success?
  end

  def verify_proposed_change(candidate_resolver)
    candidate_dns = candidate_resolver[:servers]
    if candidate_dns == current_dns
      raise "Already using #{candidate_resolver[:name]}"
    end
  end

  def verify_dns_change(old_dns, candidate_dns)
    if vpn_up?
      sleep(3) # It takes longer for the VPN to be dropped and brought back up again.
    else
      sleep(1)
    end
    new_dns = current_dns
    unless old_dns != new_dns && new_dns == candidate_dns
      raise "DNS switch verification failed. Started with #{old_dns.join(',')}, expected #{candidate_dns.join(',')}, but got #{new_dns.join(',')}."
    end
  end

  # predicate methods

  def mercurial_available?
    FileUtils.which('mercurial')
  end

  def vpn_up?
    MacOS::VPN.up?
  end
end

def switches
  @switches ||= Switches.new do |s|
    s.set(:d, :data, :data_file, :data_filepath, :resolvers_data_filepath)
    s.set(:f, :format)
  end
end

def supplied_resolvers_data_filepath
  switches.resolvers_data_filepath
end

def default_resolvers_data_filepath
  File.join('~', '.config', 'revolver', 'resolvers.json')
end

def resolvers_data_filepath
  File.expand_path(supplied_resolvers_data_filepath || default_resolvers_data_filepath)
end

def resolvers
  if File.exist?(resolvers_data_filepath)
    JSON.parse(File.read(resolvers_data_filepath), symbolize_names: true)
  else
    Revolver::RESOLVERS
  end
end

def main
  case ARGV[0]
  when 'list'
    Revolver.new(resolvers).list(ARGV[1], format: switches.format)
  when 'spin'
    Revolver.new(resolvers).spin(format: switches.format)
  when 'status'
    Revolver.new(resolvers).status(format: switches.format)
  when 'switch'
    Revolver.new(resolvers).switch(ARGV[1])
  else
    puts "Usage: revolver <command> [args] [options]"
    puts "Commands:"
    puts "  list [name]          List all or specific resolver"
    puts "  spin                 Select random resolver"
    puts "  status               Show current DNS configuration"
    puts "  switch [name]        Switch to random or specific resolver"
    puts "Options:"
    puts "  -d, --data, --data_file, --data_filepath, --resolvers_data_filepath"
    puts "                       Specify a filepath to resolvers JSON file."
    puts "                       (default: ~/.config/revolver/resolvers.json)"
    puts "  -f, --format FORMAT  Output format: console (default) or json"
    puts "                       (applies to: list, spin, status)"
  end
rescue => e
  puts "Error: #{e.message}"
  exit 1
end

main if $0 == __FILE__
